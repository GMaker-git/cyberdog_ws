# Copyright (c) 2021 Beijing Xiaomi Mobile Software Co., Ltd. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set(_DEBUG_ FALSE)

set(_yaml_file ${PROJECT_SOURCE_DIR}/params/bringup.yaml)

set(_tab_1 "\t")
set(_tab_2 "\t\t")
set(_tab_3 "\t\t\t")
set(_tab_4 "\t\t\t\t")

set(front_bracket "_FRONT_BRACKET_")
set(back_bracket  "_BACK_BRACKET_")

set(include_label  "<include>")
set(include_package_name ${PROJECT_NAME})
set(include_config_path "params")

set(yaml_key_type_struct "struct")
set(yaml_key_type_string "str")
set(yaml_key_type_int "int")
set(yaml_key_type_float "float")
set(yaml_key_type_bool "bool")

#
# 功能说明: 获取 通用 launch 数据
#
function(get_launch_data file_)
  set(${file_}
  "# Copyright (c) 2021 Beijing Xiaomi Mobile Software Co., Ltd. All rights reserved.\n"
  "#\n"
  "# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
  "# you may not use this file except in compliance with the License.\n"
  "# You may obtain a copy of the License at\n"
  "#\n"
  "#     http://www.apache.org/licenses/LICENSE-2.0\n"
  "#\n"
  "# Unless required by applicable law or agreed to in writing, software\n"
  "# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
  "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
  "# See the License for the specific language governing permissions and\n"
  "# limitations under the License.\n"
  "\n"
  "import os\n"
  "import platform\n"
  "from launch import LaunchDescription\n"
  "from launch.actions import LogInfo\n"
  "from launch.actions import DeclareLaunchArgument\n"
  "from launch.substitutions import EnvironmentVariable\n"
  "from launch.substitutions import LaunchConfiguration\n"
  "from ament_index_python.packages import get_package_share_directory\n"
  "\n"
  PARENT_SCOPE
  )
endfunction()

#
# 功能说明: 获取绝对路径下的 目标launch
#
function(get_launch_file _file_name file_)
  set(${file_}
  ${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}/launch/${_file_name}
  PARENT_SCOPE)
endfunction()

#
# 功能说明: 获取 键对应的列表长度
#
function(get_key_type _key value_)
  execute_process(
    COMMAND cat ${_yaml_file}
    COMMAND shyaml get-type ${_key}
  OUTPUT_VARIABLE _type)
  set(${value_} ${_type} PARENT_SCOPE)
endfunction()

#
# 功能说明: 获取 变量类型
#
function(get_value_type _data is_number_ is_bool_ is_string_)
  set(${is_number_} FALSE PARENT_SCOPE)
  set(${is_bool_}   FALSE PARENT_SCOPE)
  set(${is_string_} FALSE PARENT_SCOPE)
  if(${_data} MATCHES "^(-)?[0-9]+(\.)?[0-9]*$")
    set(${is_number_} TRUE PARENT_SCOPE)
  elseif(${_data} MATCHES "^(TRUE|true|True|FALSE|false|False)?$")
    set(${is_bool_} TRUE PARENT_SCOPE)
  else()
    set(${is_string_} TRUE PARENT_SCOPE)
  endif()
endfunction()

#
# 功能说明: 获取 键对应的列表长度
#
function(get_length _key value_)
  execute_process(
    COMMAND cat ${_yaml_file}
    COMMAND shyaml get-length ${_key}
  OUTPUT_VARIABLE _length)
  set(${value_} ${_length} PARENT_SCOPE)
endfunction()

#
# 功能说明: 获取 键对应的值
#
function(get_value _key value_)
  execute_process(
    COMMAND cat ${_yaml_file}
    COMMAND shyaml get-value ${_key}
  OUTPUT_VARIABLE _value)
  set(${value_} ${_value} PARENT_SCOPE)
endfunction()

#
# 功能说明: 获取 键 列表
#
function(get_keys _key keys_)
  execute_process(
    COMMAND cat ${_yaml_file}
    COMMAND shyaml get-value ${_key}
    COMMAND shyaml keys
  OUTPUT_VARIABLE _keys)
  string(REPLACE "\n" ";" _keys_list ${_keys})
  set(${keys_} ${_keys_list} PARENT_SCOPE)
endfunction()

#
# 功能说明: 生成 launch 文件
#
function(generate_launch_file _file_name _file_data)
  if(_DEBUG_)
    message("┠─>: 正在生成 launch 文件 ${_file_name}...")
  endif()
  get_launch_file(${_file_name} _target_launch)
  list(REMOVE_AT ARGV 0)
  string(TIMESTAMP COMPILE_TIME %Y.%m.%d-%H.%M.%S)
  file(WRITE ${_target_launch} "# This is the file generated by the ${PROJECT_NAME} project in ${COMPILE_TIME}.\n")
  foreach(information  IN LISTS  ARGV)
    string(REGEX REPLACE ${front_bracket} [ information ${information})
    string(REGEX REPLACE ${back_bracket} ] information ${information})
    file(APPEND ${_target_launch} ${information})
  endforeach()
endfunction()

#
# 功能说明: 声明 launch arguments
#
macro(declare_launch_argument _target_key)
  if(_DEBUG_)
    message("┠─>: 正在声明 launch arguments...")
  endif()
  get_value("${_target_key}" _target_value)
  if(NOT (${_target_value} STREQUAL "None"))
    get_length("${_target_key}" _target_key_size)
    if(${_target_key_size})
      math(EXPR _target_key_size "(${_target_key_size}-1)")
      foreach(_arguments_index RANGE 0 ${_target_key_size} 1)
        get_keys("${_target_key}.${_arguments_index}" _target_arguments_keys)
        list(APPEND _launch "${_tab_2}DeclareLaunchArgument(\n")
        set(_key_index 0)
        foreach(_target_arguments_key IN LISTS _target_arguments_keys)
          get_value("${_target_key}.${_arguments_index}.${_target_arguments_key}" _target_key_value)
          string(REGEX REPLACE "'(.*)'" "\\1" __target_key_value "${_target_key_value}")
          if(${_key_index} EQUAL 0)
            list(APPEND _launch "${_tab_3}name='${_target_arguments_key}', default_value='${__target_key_value}',\n")
          else()
            list(APPEND _launch "${_tab_3}description='${__target_key_value}',\n")
          endif()
          math(EXPR _key_index "(${_key_index}+1)")
        endforeach()
        list(APPEND _launch "${_tab_2}),\n")
      endforeach()
    endif()
  endif()
endmacro()

#
# 功能说明: 定义 launch arguments
#
macro(definition_launch_argument _target_key _target_name)
  if(_DEBUG_)
    message("┠─>: 正在定义 launch arguments...")
  endif()
  get_value("${_target_key}" _target_value)
  if(NOT (${_target_value} STREQUAL "None"))
    get_length("${_target_key}" _target_key_size)
    if(${_target_key_size})
      math(EXPR _target_key_size "(${_target_key_size}-1)")
      list(APPEND _launch "${_tab_3}${_target_name}={\n")
      foreach(_arguments_index RANGE 0 ${_target_key_size} 1)
        get_keys("${_target_key}.${_arguments_index}" _target_arguments_keys)
        foreach(_target_arguments_key IN LISTS _target_arguments_keys)
          list(APPEND _launch "${_tab_4}'${_target_arguments_key}': LaunchConfiguration('${_target_arguments_key}'),\n")
          break()
        endforeach()
      endforeach()
      list(APPEND _launch "${_tab_3}}.items(),\n")
    endif()
  endif()
endmacro()

#
# 功能说明: 加载 launch arguments
#
macro(include_launch_parameters _target_key _target_key_size)
  if(_DEBUG_)
    message("┠─>: 正在加载 launch arguments...")
  endif()
  foreach(_parameters_index RANGE 0 ${_target_key_size} 1)
    get_keys("${_target_key}.${_parameters_index}" _target_parameters_keys)
    list(LENGTH _target_parameters_keys _target_parameters_keys_number)
    if(${_target_parameters_keys_number} LESS 2)
      continue()
    endif()
    list(GET _target_parameters_keys 0 _include_key)
    if(NOT (${_include_key} STREQUAL ${include_label}))
      continue()
    endif()
    get_key_type("${_target_key}.${_parameters_index}.${_include_key}" _include_key_type)
    if(${_include_key_type} STREQUAL ${yaml_key_type_struct})
      get_keys("${_target_key}.${_parameters_index}.${_include_key}" _include_key_keys)
      list(FIND _include_key_keys "yaml_name" _yaml_name_keys_index)
      if(${_yaml_name_keys_index} LESS 0)
        continue()
      else()
        get_value("${_target_key}.${_parameters_index}.${_include_key}.yaml_name" _include_yaml_name)
      endif()

      list(FIND _include_key_keys "package_name" _package_name_keys_index)
      if(${_package_name_keys_index} LESS 0)
        set(_include_package_name ${include_package_name})
      else()
        get_value("${_target_key}.${_parameters_index}.${_include_key}.package_name" _include_package_name)
      endif()

      list(FIND _include_key_keys "config_path" _config_path_keys_index)
      if(${_config_path_keys_index} LESS 0)
        set(_include_config_path ${include_config_path})
      else()
        get_value("${_target_key}.${_parameters_index}.${_include_key}.config_path" _include_config_path)
      endif()
    else()
      set(_include_package_name ${include_package_name})
      set(_include_config_path ${include_config_path})
      get_value("${_target_key}.${_parameters_index}.${_include_key}" _include_yaml_name)
    endif()

    list(GET _target_parameters_keys 1 _description_key)
    get_value("${_target_key}.${_parameters_index}.${_description_key}" _description_value)

    string(REGEX REPLACE "'(.*)'" "\\1" __include_package_name "${_include_package_name}")
    string(REGEX REPLACE "'(.*)'" "\\1" __include_config_path "${_include_config_path}")
    string(REGEX REPLACE "'(.*)'" "\\1" __include_yaml_name "${_include_yaml_name}")
    string(REGEX REPLACE "'(.*)'" "\\1" __description_value "${_description_value}")
    set(__include_package_path "get_package_share_directory('${__include_package_name}')")
    set(__include_yaml "os.path.join(${__include_package_path}, '${__include_config_path}', '${__include_yaml_name}')")
    list(APPEND _launch "${_tab_3}${__include_yaml}, # ${__description_value}\n")
  endforeach()
endmacro()

#
# 功能说明: 定义 launch parameters
#
macro(definition_launch_parameters _target_key _target_name)
  if(_DEBUG_)
    message("┠─>: 正在定义 launch parameters...")
  endif()
  get_value("${_target_key}" _target_value)
  if(NOT (${_target_value} STREQUAL "None"))
    get_length("${_target_key}" _target_key_size)
    if(${_target_key_size})
      math(EXPR _target_key_size "(${_target_key_size}-1)")
      list(APPEND _launch "${_tab_3}${_target_name}=${front_bracket}\n")
      include_launch_parameters("${_target_key}" ${_target_key_size})
      list(APPEND _launch "${_tab_3}{\n")
      foreach(_parameters_index RANGE 0 ${_target_key_size} 1)
        get_keys("${_target_key}.${_parameters_index}" _target_parameters_keys)
        list(LENGTH _target_parameters_keys _target_parameters_keys_number)
        if(${_target_parameters_keys_number} LESS 2)
          continue()
        endif()
        list(GET _target_parameters_keys 0 _include_key)
        if(${_include_key} STREQUAL ${include_label})
          continue()
        endif()
        set(_key_index 0)
        foreach(_target_parameters_key IN LISTS _target_parameters_keys)
          get_value("${_target_key}.${_parameters_index}.${_target_parameters_key}" _target_parameters_value)
          string(REGEX REPLACE "'(.*)'" "\\1" __target_parameters_value "${_target_parameters_value}")
          if(${_key_index} EQUAL 0)
            get_value_type(${__target_parameters_value} _is_number _is_bool _is_string)
            if(_is_string)
              set(_target_key_parameter "'${_target_parameters_key}':'${__target_parameters_value}',  # ")
            else()
              set(_target_key_parameter "'${_target_parameters_key}':${__target_parameters_value},  # ")
            endif()
          else()
            string(CONCAT _target_key_parameter ${_target_key_parameter} "${__target_parameters_value} ")
          endif()
          math(EXPR _key_index "(${_key_index}+1)")
        endforeach()
        list(APPEND _launch "${_tab_4}${_target_key_parameter}\n")
      endforeach()
      list(APPEND _launch "${_tab_3}}${back_bracket},\n")
    endif()
  endif()
endmacro()

#
# 功能说明: 定义 launch remappings
#
macro(definition_launch_remappings _target_key _target_name)
  if(_DEBUG_)
    message("┠─>: 正在定义 launch remappings...")
  endif()
  get_value("${_target_key}" _target_value)
  if(NOT (${_target_value} STREQUAL "None"))
    get_length("${_target_key}" _target_key_size)
    if(${_target_key_size})
      math(EXPR _target_key_size "(${_target_key_size}-1)")
      list(APPEND _launch "${_tab_3}${_target_name}=${front_bracket}\n")
      foreach(remappings_index RANGE 0 ${_target_key_size} 1)
        get_keys("${_target_key}.${remappings_index}" _target_remappings_keys)
        list(LENGTH _target_remappings_keys _target_remappings_keys_number)
        if(${_target_remappings_keys_number} LESS 2)
          # message("remappings key 非法(${_target_key}.${remappings_index})，将忽略")
          continue()
        endif()
        get_value("${_target_key}.${remappings_index}.from" _target_remappings_from_value)
        get_value("${_target_key}.${remappings_index}.to" _target_remappings_to_value)
        string(REGEX REPLACE "'(.*)'" "\\1" __target_remappings_from_value "${_target_remappings_from_value}")
        string(REGEX REPLACE "'(.*)'" "\\1" __target_remappings_to_value "${_target_remappings_to_value}")
        list(APPEND _launch "${_tab_4}('${__target_remappings_from_value}', '${__target_remappings_to_value}'),\n")
      endforeach()
      list(APPEND _launch "${_tab_3}${back_bracket},\n")
    endif()
  endif()
endmacro()

#
# 功能说明: 自动生成 launch 模块文件
#
function(automatically_generate_launch_module_files)
  cmake_parse_arguments(_ARG "LOG" "" "" ${ARGN})

  if(_ARG_LOG)
    message("┠─>: 正在生成 launch 模块文件...")
  endif()

  set(_automatic_key data.launch.initiative.automatic)
  get_length(${_automatic_key} _automatic_size)
  if(${_automatic_size})
    math(EXPR _automatic_size "(${_automatic_size}-1)")
    foreach(_automatic_index RANGE 0 ${_automatic_size} 1)
      get_value("${_automatic_key}.${_automatic_index}.enable" _enable)
      if(NOT ${_enable})
        continue()  # launch 未使能，忽略
      endif()
      get_length("${_automatic_key}.${_automatic_index}.module.nodes" _nodes_size)

      if(NOT ${_nodes_size})
        continue() # 节点列表为空，忽略
      endif()

      get_launch_data(_launch)
      list(APPEND _launch
      "from launch_ros.actions import Node\n"
      "def generate_launch_description():\n"
      "${_tab_1}user_env_var = 'USERNAME' if platform.system() == 'Windows' else 'USER'\n"
      "${_tab_1}return LaunchDescription(${front_bracket}\n"
      "${_tab_2}LogInfo(msg=(EnvironmentVariable(name=user_env_var), ' 正在初始化 launch ...')),\n"
      )

      set(_nodes_key ${_automatic_key}.${_automatic_index}.module.nodes)
      math(EXPR _nodes_size "(${_nodes_size}-1)")
      foreach(_nodes_index RANGE 0 ${_nodes_size} 1)
        get_value("${_nodes_key}.${_nodes_index}.enable" _enable)
        if(NOT ${_enable})
          continue()  # 节点未使能，忽略
        endif()

        get_keys("${_nodes_key}.${_nodes_index}.module" _keys)
        list(FIND _keys "arguments" _keys_index)

        if(${_keys_index} GREATER_EQUAL 0)
          declare_launch_argument("${_nodes_key}.${_nodes_index}.module.arguments")
        endif()

        list(APPEND _launch "${_tab_2}Node(\n")
        foreach(_key IN LISTS _keys)
          get_value("${_nodes_key}.${_nodes_index}.module.${_key}" _key_value)
          if(${_key_value} STREQUAL "None")
            continue()  # 节点属性为空，将忽略
          endif()

          if((${_key} STREQUAL "namespace") OR
              (${_key} STREQUAL "package") OR
              (${_key} STREQUAL "executable") OR
              (${_key} STREQUAL "name") OR
              (${_key} STREQUAL "exec_name"))
            list(APPEND _launch "${_tab_3}${_key}='${_key_value}',\n")
          elseif(${_key} STREQUAL "parameters")
            definition_launch_parameters("${_nodes_key}.${_nodes_index}.module.${_key}" "parameters")
          elseif(${_key} STREQUAL "remappings")
            definition_launch_remappings("${_nodes_key}.${_nodes_index}.module.${_key}" "remappings")
          elseif(${_key} STREQUAL "arguments")
            definition_launch_argument("${_nodes_key}.${_nodes_index}.module.${_key}" "arguments")
          endif()
        endforeach()
        list(APPEND _launch "${_tab_2}),\n")
      endforeach()

      list(APPEND _launch "${_tab_1}${back_bracket})\n")
      get_value("${_automatic_key}.${_automatic_index}.module.file_name" _target_file)
      generate_launch_file(${_target_file} ${_launch})
    endforeach()
  endif()
endfunction()

macro(add_launch_meta _target_key)
  cmake_parse_arguments(_ARG "IS_AUTOMATIC" "" "" ${ARGN})

  if(_DEBUG_)
    if(_ARG_IS_AUTOMATIC)
      message("┠─>: 正在添加 launch 自动元...")
    else()
      message("┠─>: 正在添加 launch 手动元...")
    endif()
  endif()

  get_length(${_target_key} _target_size)
  if(${_target_size})
    math(EXPR _target_size "(${_target_size}-1)")
    foreach(_target_index RANGE 0 ${_target_size} 1)
      get_value("${_target_key}.${_target_index}.enable" _enable)
      if(NOT ${_enable})  # launch 未使能
        continue()
      endif()

      if(_ARG_IS_AUTOMATIC)
        set(_target_package ${PROJECT_NAME})
      else()
        get_value("${_target_key}.${_target_index}.module.package_name" _target_package)
      endif()

      get_value("${_target_key}.${_target_index}.module.file_name" _target_file)
      set(_launch_file_source "os.path.join(get_package_share_directory('${_target_package}'), 'launch', '${_target_file}')")
      list(APPEND _launch "${_tab_2}LogInfo(msg=('正在加载 launch 文件:', ${_launch_file_source})),\n")

      declare_launch_argument("${_target_key}.${_target_index}.module.arguments")

      list(APPEND _launch
      "${_tab_2}IncludeLaunchDescription(\n"
      "${_tab_3}PythonLaunchDescriptionSource(${_launch_file_source}),\n"
      )

      definition_launch_argument("${_target_key}.${_target_index}.module.arguments" "launch_arguments")

      list(APPEND _launch "${_tab_2}),\n")
    endforeach()
  endif()
endmacro()

#
# 功能说明: 自动生成 launch 集合文件
#
function(automatically_generate_launch_gather_files)
  cmake_parse_arguments(_ARG "LOG" "" "" ${ARGN})

  if(_ARG_LOG)
    message("┠─>: 正在生成 launch 集合文件...")
  endif()

  get_launch_data(_launch)
  list(APPEND _launch
  "from launch.actions import IncludeLaunchDescription\n"
  "from launch.launch_description_sources import PythonLaunchDescriptionSource\n"
  "\n"
  "def generate_launch_description():\n"
  "${_tab_1}user_env_var = 'USERNAME' if platform.system() == 'Windows' else 'USER'\n"
  "${_tab_1}return LaunchDescription(${front_bracket}\n"
  "${_tab_2}LogInfo(msg=(EnvironmentVariable(name=user_env_var), ' 正在初始化 launch ...')),\n"
  )

  add_launch_meta("data.launch.initiative.automatic" IS_AUTOMATIC)
  add_launch_meta("data.launch.initiative.manual")

  list(APPEND _launch "${_tab_1}${back_bracket})\n")

  get_value("data.launch.file_name" _target_file)
  generate_launch_file(${_target_file} ${_launch})
endfunction()

#
# 功能说明: 自动生成 launch 文件
#
function(automatically_generate_launch_files)
  cmake_parse_arguments(_ARG "LOG" "" "" ${ARGN})

  if(_${PROJECT_NAME}_AMENT_PACKAGE)
    message(FATAL_ERROR "lcmidl_generate_interfaces() 必须在 ament_package() 之前调用")
  endif()

  if(_ARG_LOG)
    message("\n┏━>: 开始依据 ${_yaml_file} 文件生成 launch 文件...")
    set(_ARG_LOG_ "LOG")
  endif()

  automatically_generate_launch_module_files(${_ARG_LOG_})
  automatically_generate_launch_gather_files(${_ARG_LOG_})

  if(_ARG_LOG)
    message("┗━>: 生成 launch 文件结束，已安装到 ${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}/launch 路径下。")
  endif()

endfunction()
